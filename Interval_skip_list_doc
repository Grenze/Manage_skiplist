class Interval_skip_list_interval
private:
	bool lbound, rbound
	Value inf, sup
public:
	contains(value)
	contains_interval(Value l, Value r)
	operator == != <<


template <class Interval_> 
class Interval_skip_list<-friend->IntervalSLnode, IntervalList<-friend->IntervalListElt

const int MAX_FORWARD = 48


class IntervalSLnode:// interval skip list node
private:
	bool is_header
	Value key
	IntervalSLnode** forward
	IntervalList<Interval>** markers
	IntervalList<Interval>* eqMarkers
	int ownerCount, topLevel
public:
	constructor ~ for head node and non-head node(level random problem)
	IntervalSLnode* get_next()
	Value getValue()
	int level()
	bool isHeader()
	void print()



class Interval_skip_list
private:
	int maxLevel
	Random random
	IntervalSLnode<Interval>* header
	std::list<Interval> container

        typedef typename std::list<Interval>::iterator Interval_handle
        typedef IntervalListElt<Interval>* ILE_handle
	
	int randomLevel()
	IntervalSLnode<Interval>* search(Key, IntervalSLnode<Interval>** update)

	//insert interval
	void insert(Interval_handle& I)//Interval_handle related to the interval container
	IntervalSLnode<Interval>* insert(Key)
	void adjustMarkersOnInsert(IntervalSLnode<Interval>* x,
				   IntervalSLnode<Interval>** update)
        void removeMarkFromLevel(const Interval& m, int i,
                                 IntervalSLnode<Interval> *l,
                                 IntervalSLnode<Interval>* r)
	void placeMarkers(IntervalSLnode<Interval>* left,
			  IntervalSLndoe<Interval>* right, Interval_handle &I)
	//remove interval
	Interval_handle removeMarkers<IntervalSLnode<Interval>* left, Interval& I)

	void adjustMarkersOnDelete(IntervalSLnode<Interval>* x,
				 IntervalSLnode<Interval>** update)
        void remove(IntervalSLnode<Interval>* x, IntervalSLnode<Interval>** update)
public:
	Interval_skip_list() ~Interval_skip_list()
	Interval_skip_list(InputIterator b, InputIterator e)
	clear()
	size()
	search(Value)
	find_intervals(Values, OutputIterator out)
	is_contained(Value)
	insert(Interval)
	insert(InputIterator b, InputIterator e)
	remove(Interval)

	print(os)
	printOrdered(os)
	
	container.begin()
	container.end()
	
	
	
class IntervalList
private:
        typedef typename std::list<Interval>::iterator Interval_handle
        typedef IntervalListElt<Interval>* ILE_handle
	ILE_handle header
	std::allocator<IntervalListElt<Interval>> alloc
public:
	IntervalList() ~IntervalList()
	insert(Interval_handle&)
	remove(Interval&, Interval_handle& ret)
	remove(Interval&)
	removeAll(IntervalList*)
	
	TLE_handle create_list_element(Interval_handle&)
	erase_list_element(TLE_handle)

	ILE_handle get_first()
	ILE_handle get_next(ILE_handle)

	copy(IntervalList* from)

	copy(OutputIterator out)

	contains(Interval_handle&)

	clear()

	print(os)
	

class IntervalListElt
private:
        typedef Interval_ Interval;

        typedef typename std::list<Interval>::iterator Interval_handle;

        typedef IntervalListElt<Interval>* ILE_handle;


        Interval_handle I;
        ILE_handle next;

public:
	IntervalListElt() ~IntervalListElt()
	IntervalListElt(Interval_handle&)
	set_next(ILE_handle)
	get_next()
	getInterval()
	print(os)



problem:
	insert(Interval_handle) no need to wrap Interval in handle
	std::list<Interval> container, so there is interval_handle
	container.push_front(I)
	Interval_handle points to the position of Interval in container

techniques:
	persistent_ptr is smart ptr
	transaction promises atomic consistent durability
	data structure modify thread doesn't influence the read thread, which
	means the read thread will never see a structure inconsistent, most import 
	there is no hazard pointer

attentions:
	when modify the structure of root object; remove the pmem file to construct a new one 


1. Construct a twoLevelIterator from ISL and nvm_imm_, to support pre()/next() function,
   a IntervalSLnode should knows which interval's endpoint it is. So when twoLevelIterator
   reaches IntervalSLnode(N1), N1's corresponding nvm_imm_'s iterator can be added to merger.

2.  For ISL, there is no need to set container member. In stead, for nvm_versions_ intervals[?]
    get in charge of intervals, like levelDB's files_[levels].


3. Tested: 1000 000 intervals inserted find_intervals and remove, costs 7.8s



4.  ISL node should keep the value from intervals. When remove an interval, node should know
    whether itself belongs to this interval(owner_intervals). Use timestamp to differ them.











